#     y[a] = 3
#     }
#   else if (ystar[a] <= threshold.4) {
#     y[a] = 4
#   }
#   else {
#     y[a] = 5
#   }
# }
list.of.datasets <- append(list.of.datasets, empty.y.mat)
the.title <- paste0("Gamma: ", list.of.gammas[g], "beta: ", list.of.betas[b], "thresholds: ", list.of.thresholds[t]
hist(y, main = the.title)
#step 1 - generate background variables
N <- 1000 #not going to change when we're just looking at histograms
x1 <- rnorm(N)
x2 <- rbinom(N,1,.5)
# b1 <- .1
# b2 <- .2
# b3 <- .9
#
# equal1 <- -1.8
# equal2 <- -0.6
# equal3 <- 0.6
# equal4 <- 1.8
#
# mild1 <- -1
# mild2 <- -0.2
# mild3 <- 1
# mild4 <- 2.5
#
# severe1 <- 1
# severe2 <- 2
# severe3 <- 2.5
# severe4 <- 3
#step 2 - generate eta
# eta <- b1*x1 + b2*x2 + b3*rnorm(N)
#step 3 - generate ystar
# gamma1 <- .8
# gamma2 <- .6
# ystar1 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar2 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar3 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar4 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar5 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar6 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar7 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar8 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar9 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar10 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
#generate y1...y10
#create lists for varying conditions (thresholds, gammas, betas)
thresholds.equal <- c(-1.8, -0.6, 0.6, 1.8)
thresholds.mild <- c(-0.2, 1, 1.8, 2.4)
thresholds.severe <- c(1, 2, 2.5, 3)
list.of.thresholds <- list(thresholds.equal, thresholds.mild, thresholds.severe)
gammas.A <- c(.7, sqrt(.51))
gammas.B <- c(.8, .6)
gammas.C <- c(.9, sqrt(.19))
list.of.gammas <- list(gammas.A, gammas.B, gammas.C)
betas.A <- c(.1, .2, .9)
betas.B <- c(.2, .4, .8)
list.of.betas <- list(betas.A, betas.B)
#y1, y2, y9, y10 = mild
#y3, y4, y5 = equal
#y6, y7, y8 = severe
#Want to create 6 datasets, one for each combination of beta and gamma
#But the thresholds will differ over the items, not over the datasets
#Each will be an N x 10 matrix with above configurations of equal, mild, and severe
#initialize empty list to store datasets
list.of.datasets <- list()
#nested for loop to iterate through conditions
for (g in 1:3) {
g.gammas <- list.of.gammas[[g]]
gamma.1 <- g.gammas[1]
gamma.2 <- g.gammas[2]
for (b in 1:2) {
b.betas <- list.of.betas[[b]]
beta.1 <- b.betas[1]
beta.2 <- b.betas[2]
beta.3 <- b.betas[3]
# I recommend making a 6-length list (initialize it as empty) and then         appending empty.y.mat every time loop terminates
# Look up list() and append()
#For loop looping over the columns (i.e., for X in 1:10)
#If X == 1, 2, 8, or 9, then define thresholds as mild
#etc
empty.y.mat <- matrix(NA, N, 10)
for (x in 1:10) {
y <- rep(NA, N)
eta <- beta.1*x1 + beta.2*x2 + beta.3*rnorm(N)
ystar <- gamma.1*eta + gamma.2*rnorm(N, 0, sd(eta))
if (x == 1 | x == 2 | x == 9 | x == 10) {
threshold.1 <- thresholds.mild[1]
threshold.2 <- thresholds.mild[2]
threshold.3 <- thresholds.mild[3]
threshold.4 <- thresholds.mild[4]
print("mild")
}
else if (x == 3 | x == 4 | x == 5) {
threshold.1 <- thresholds.equal[1]
threshold.2 <- thresholds.equal[2]
threshold.3 <- thresholds.equal[3]
threshold.4 <- thresholds.equal[4]
print("equal")
}
else {
threshold.1 <- thresholds.severe[1]
threshold.2 <- thresholds.severe[2]
threshold.3 <- thresholds.severe[3]
threshold.4 <- thresholds.severe[4]
print("severe")
}
for (a in 1:N) {
if (ystar[a] <= threshold.1) {
y[a] = 1
}
else if (ystar[a] <= threshold.2) {
y[a] = 2
}
else if (ystar[a] <= threshold.3) {
y[a] = 3
}
else if (ystar[a] <= threshold.4) {
y[a] = 4
}
else {
y[a] = 5
}
}
# for (t in 1:3) {
#   t.thresholds <- list.of.thresholds[[t]]
#   threshold.1 <- t.thresholds[1]
#   threshold.2 <- t.thresholds[2]
#   threshold.3 <- t.thresholds[3]
#   threshold.4 <- t.thresholds[4]
#
# y <- rep(NA, N)
# #eta <- beta.1*x1 + beta.2*x2 + beta.3*rnorm(N)
# ystar <- gamma.1*eta + gamma.2*rnorm(N, 0, sd(eta))
#
# for (a in 1:N) {
#   if (ystar[a] <= threshold.1) {
#     y[a] = 1
#   }
#   else if (ystar[a] <= threshold.2) {
#     y[a] = 2
#     }
#   else if (ystar[a] <= threshold.3) {
#     y[a] = 3
#     }
#   else if (ystar[a] <= threshold.4) {
#     y[a] = 4
#   }
#   else {
#     y[a] = 5
#   }
# }
list.of.datasets <- append(list.of.datasets, empty.y.mat)
the.title <- paste0("Gamma: ", list.of.gammas[g], "beta: ", list.of.betas[b], "thresholds: ", list.of.thresholds[t])
hist(y, main = the.title)
}
}
}
#step 1 - generate background variables
N <- 1000 #not going to change when we're just looking at histograms
x1 <- rnorm(N)
x2 <- rbinom(N,1,.5)
# b1 <- .1
# b2 <- .2
# b3 <- .9
#
# equal1 <- -1.8
# equal2 <- -0.6
# equal3 <- 0.6
# equal4 <- 1.8
#
# mild1 <- -1
# mild2 <- -0.2
# mild3 <- 1
# mild4 <- 2.5
#
# severe1 <- 1
# severe2 <- 2
# severe3 <- 2.5
# severe4 <- 3
#step 2 - generate eta
# eta <- b1*x1 + b2*x2 + b3*rnorm(N)
#step 3 - generate ystar
# gamma1 <- .8
# gamma2 <- .6
# ystar1 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar2 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar3 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar4 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar5 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar6 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar7 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar8 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar9 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
# ystar10 <- gamma1*eta + gamma2*rnorm(N, 0, sd(eta))
#generate y1...y10
#create lists for varying conditions (thresholds, gammas, betas)
thresholds.equal <- c(-1.8, -0.6, 0.6, 1.8)
thresholds.mild <- c(-0.2, 1, 1.8, 2.4)
thresholds.severe <- c(1, 2, 2.5, 3)
list.of.thresholds <- list(thresholds.equal, thresholds.mild, thresholds.severe)
gammas.A <- c(.7, sqrt(.51))
gammas.B <- c(.8, .6)
gammas.C <- c(.9, sqrt(.19))
list.of.gammas <- list(gammas.A, gammas.B, gammas.C)
betas.A <- c(.1, .2, .9)
betas.B <- c(.2, .4, .8)
list.of.betas <- list(betas.A, betas.B)
#y1, y2, y9, y10 = mild
#y3, y4, y5 = equal
#y6, y7, y8 = severe
#Want to create 6 datasets, one for each combination of beta and gamma
#But the thresholds will differ over the items, not over the datasets
#Each will be an N x 10 matrix with above configurations of equal, mild, and severe
#initialize empty list to store datasets
list.of.datasets <- list()
#nested for loop to iterate through conditions
for (g in 1:3) {
g.gammas <- list.of.gammas[[g]]
gamma.1 <- g.gammas[1]
gamma.2 <- g.gammas[2]
for (b in 1:2) {
b.betas <- list.of.betas[[b]]
beta.1 <- b.betas[1]
beta.2 <- b.betas[2]
beta.3 <- b.betas[3]
# I recommend making a 6-length list (initialize it as empty) and then         appending empty.y.mat every time loop terminates
# Look up list() and append()
#For loop looping over the columns (i.e., for X in 1:10)
#If X == 1, 2, 8, or 9, then define thresholds as mild
#etc
empty.y.mat <- matrix(NA, N, 10)
for (x in 1:10) {
y <- rep(NA, N)
eta <- beta.1*x1 + beta.2*x2 + beta.3*rnorm(N)
ystar <- gamma.1*eta + gamma.2*rnorm(N, 0, sd(eta))
if (x == 1 | x == 2 | x == 9 | x == 10) {
threshold.1 <- thresholds.mild[1]
threshold.2 <- thresholds.mild[2]
threshold.3 <- thresholds.mild[3]
threshold.4 <- thresholds.mild[4]
print("mild")
}
else if (x == 3 | x == 4 | x == 5) {
threshold.1 <- thresholds.equal[1]
threshold.2 <- thresholds.equal[2]
threshold.3 <- thresholds.equal[3]
threshold.4 <- thresholds.equal[4]
print("equal")
}
else {
threshold.1 <- thresholds.severe[1]
threshold.2 <- thresholds.severe[2]
threshold.3 <- thresholds.severe[3]
threshold.4 <- thresholds.severe[4]
print("severe")
}
for (a in 1:N) {
if (ystar[a] <= threshold.1) {
y[a] = 1
}
else if (ystar[a] <= threshold.2) {
y[a] = 2
}
else if (ystar[a] <= threshold.3) {
y[a] = 3
}
else if (ystar[a] <= threshold.4) {
y[a] = 4
}
else {
y[a] = 5
}
}
# for (t in 1:3) {
#   t.thresholds <- list.of.thresholds[[t]]
#   threshold.1 <- t.thresholds[1]
#   threshold.2 <- t.thresholds[2]
#   threshold.3 <- t.thresholds[3]
#   threshold.4 <- t.thresholds[4]
#
# y <- rep(NA, N)
# #eta <- beta.1*x1 + beta.2*x2 + beta.3*rnorm(N)
# ystar <- gamma.1*eta + gamma.2*rnorm(N, 0, sd(eta))
#
# for (a in 1:N) {
#   if (ystar[a] <= threshold.1) {
#     y[a] = 1
#   }
#   else if (ystar[a] <= threshold.2) {
#     y[a] = 2
#     }
#   else if (ystar[a] <= threshold.3) {
#     y[a] = 3
#     }
#   else if (ystar[a] <= threshold.4) {
#     y[a] = 4
#   }
#   else {
#     y[a] = 5
#   }
# }
list.of.datasets <- append(list.of.datasets, empty.y.mat)
# the.title <- paste0("Gamma: ", list.of.gammas[g], "beta: ", list.of.betas[b], "thresholds:", list.of.thresholds[t])
# hist(y, main = the.title)
}
}
}
library(MplusAutomation)
library(tidyverse)
#path <- "G1_B1_N1/rep1_g1_b1_n1_item1.out"
# output <- readModels("G1_B1_N1/rep1_g1_b1_n1_item1.out")
# output_data <- as.data.frame(output$parameters)
#
# data <- output_data |>
#   filter((unstandardized.paramHeader == "New.Additional.Parameters") | (unstandardized.paramHeader == "Y1.ON")) |>
#   mutate(condition = str_extract(path, ".+(?=/)"), rep = str_extract(path, "rep\\d+"), item = str_extract(path, "item\\d+"))
library(data.table)
library(rlist)
install.packages("rlist")
knitr::opts_chunk$set(echo = TRUE)
library(MplusAutomation)
library(tidyverse)
#path <- "G1_B1_N1/rep1_g1_b1_n1_item1.out"
# output <- readModels("G1_B1_N1/rep1_g1_b1_n1_item1.out")
# output_data <- as.data.frame(output$parameters)
#
# data <- output_data |>
#   filter((unstandardized.paramHeader == "New.Additional.Parameters") | (unstandardized.paramHeader == "Y1.ON")) |>
#   mutate(condition = str_extract(path, ".+(?=/)"), rep = str_extract(path, "rep\\d+"), item = str_extract(path, "item\\d+"))
library(data.table)
library(rlist)
setwd("/Users/colev/Dropbox/collab_2023/Cassi/non-normal/data")
reps <- 1:500
#vector to store/iterate through items
item <- 1:10
data_list <- list()
for (i in 1:length(reps)) {
for(j in 1:length(item)) {
path <- paste0("G1_B1_N1/rep", i, "_g1_b1_n1_item", j, ".out")
output <- readModels(path)$parameters$unstandardized
output_data <- as.data.frame(output)
y <- paste0("Y", j, ".ON")
data <- output_data |>
filter((paramHeader == "New.Additional.Parameters")| (paramHeader == y)) |>
mutate(condition = str_extract(path, ".+(?=/)"), rep = str_extract(path, "(?<=rep)\\d+"), item = str_extract(path, "(?<=item)\\d+"))
#add data frame to list
data_list <- list.append(data_list, as.data.frame(data))
}
}
setwd("/Users/colev/Dropbox/collab_2023/Cassi/non-normal/data")
setwd("data")
reps <- 1:500
#vector to store/iterate through items
item <- 1:10
data_list <- list()
for (i in 1:length(reps)) {
for(j in 1:length(item)) {
path <- paste0("G1_B1_N1/rep", i, "_g1_b1_n1_item", j, ".out")
output <- readModels(path)$parameters$unstandardized
output_data <- as.data.frame(output)
y <- paste0("Y", j, ".ON")
data <- output_data |>
filter((paramHeader == "New.Additional.Parameters")| (paramHeader == y)) |>
mutate(condition = str_extract(path, ".+(?=/)"), rep = str_extract(path, "(?<=rep)\\d+"), item = str_extract(path, "(?<=item)\\d+"))
#add data frame to list
data_list <- list.append(data_list, as.data.frame(data))
}
}
##rbind data_list
final_data <- rbindlist(data_list)
head(final_data)
y8.x1.int <- subset(final_data, final_data$paramHeader == "Y8.ON" & param == "X1")
View(y8.x1.int)
mean(y8.x1.int$pval < .05)
y1.x1.int <- subset(final_data, final_data$paramHeader == "Y1.ON" & param == "X1")
mean(y1.x1.int$pval < .05)
y2.x2.int <- subset(final_data, final_data$paramHeader == "Y2.ON" & param == "X1")
mean(y2.x1.int$pval < .05)
y1.x1.int <- subset(final_data, final_data$paramHeader == "Y1.ON" & param == "X1")
mean(y1.x1.int$pval < .05)
y2.x1.int <- subset(final_data, final_data$paramHeader == "Y2.ON" & param == "X1")
mean(y2.x1.int$pval < .05)
y3.x1.int <- subset(final_data, final_data$paramHeader == "Y3.ON" & param == "X1")
mean(y3.x1.int$pval < .05)
y4.x1.int <- subset(final_data, final_data$paramHeader == "Y4.ON" & param == "X1")
mean(y4.x1.int$pval < .05)
y5.x1.int <- subset(final_data, final_data$paramHeader == "Y5.ON" & param == "X1")
mean(y5.x1.int$pval < .05)
y6.x1.int <- subset(final_data, final_data$paramHeader == "Y6.ON" & param == "X1")
mean(y6.x1.int$pval < .05)
y7.x1.int <- subset(final_data, final_data$paramHeader == "Y7.ON" & param == "X1")
mean(y7.x1.int$pval < .05)
y8.x1.int <- subset(final_data, final_data$paramHeader == "Y8.ON" & param == "X1")
mean(y8.x1.int$pval < .05)
y9.x1.int <- subset(final_data, final_data$paramHeader == "Y9.ON" & param == "X1")
mean(y9.x1.int$pval < .05)
y10.x1.int <- subset(final_data, final_data$paramHeader == "Y10.ON" & param == "X1")
mean(y10.x1.int$pval < .05)
y1.x2.int <- subset(final_data, final_data$paramHeader == "Y1.ON" & param == "X2")
mean(y1.x2.int$pval < .05)
y2.x2.int <- subset(final_data, final_data$paramHeader == "Y2.ON" & param == "X2")
mean(y2.x2.int$pval < .05)
y3.x2.int <- subset(final_data, final_data$paramHeader == "Y3.ON" & param == "X2")
mean(y3.x2.int$pval < .05)
y4.x2.int <- subset(final_data, final_data$paramHeader == "Y4.ON" & param == "X2")
mean(y4.x2.int$pval < .05)
y5.x2.int <- subset(final_data, final_data$paramHeader == "Y5.ON" & param == "X2")
mean(y5.x2.int$pval < .05)
y6.x2.int <- subset(final_data, final_data$paramHeader == "Y6.ON" & param == "X2")
mean(y6.x2.int$pval < .05)
y7.x2.int <- subset(final_data, final_data$paramHeader == "Y7.ON" & param == "X2")
mean(y7.x2.int$pval < .05)
y8.x2.int <- subset(final_data, final_data$paramHeader == "Y8.ON" & param == "X2")
mean(y8.x2.int$pval < .05)
y9.x2.int <- subset(final_data, final_data$paramHeader == "Y9.ON" & param == "X2")
mean(y9.x2.int$pval < .05)
y10.x2.int <- subset(final_data, final_data$paramHeader == "Y10.ON" & param == "X2")
mean(y10.x2.int$pval < .05)
head(final_data)
y1.x2.load <- subset(final_data, final_data$param == "L10_2")
mean(y1.x2.load$pval < .05)
y1.x2.load <- subset(final_data, final_data$param == "L1_2")
mean(y1.x2.load$pval < .05)
y2.x2.load <- subset(final_data, final_data$param == "L2_2")
mean(y2.x2.load$pval < .05)
y1.x2.load <- subset(final_data, final_data$param == "L1_2")
mean(y1.x2.load$pval < .05)
y2.x2.load <- subset(final_data, final_data$param == "L2_2")
mean(y2.x2.load$pval < .05)
y3.x2.load <- subset(final_data, final_data$param == "L3_2")
mean(y3.x2.load$pval < .05)
y4.x2.load <- subset(final_data, final_data$param == "L4_2")
mean(y4.x2.load$pval < .05)
y5.x2.load <- subset(final_data, final_data$param == "L5_2")
mean(y5.x2.load$pval < .05)
y6.x2.load <- subset(final_data, final_data$param == "L6_2")
mean(y6.x2.load$pval < .05)
y7.x2.load <- subset(final_data, final_data$param == "L7_2")
mean(y7.x2.load$pval < .05)
y8.x2.load <- subset(final_data, final_data$param == "L8_2")
mean(y8.x2.load$pval < .05)
y9.x2.load <- subset(final_data, final_data$param == "L9_2")
mean(y9.x2.load$pval < .05)
y10.x2.load <- subset(final_data, final_data$param == "L10_2")
mean(y10.x2.load$pval < .05)
y1.x1.load <- subset(final_data, final_data$param == "L1_1")
mean(y1.x1.load$pval < .05)
y2.x1.load <- subset(final_data, final_data$param == "L2_1")
mean(y2.x1.load$pval < .05)
y3.x1.load <- subset(final_data, final_data$param == "L3_1")
mean(y3.x1.load$pval < .05)
y4.x1.load <- subset(final_data, final_data$param == "L4_1")
mean(y4.x1.load$pval < .05)
y5.x1.load <- subset(final_data, final_data$param == "L5_1")
mean(y5.x1.load$pval < .05)
y6.x1.load <- subset(final_data, final_data$param == "L6_1")
mean(y6.x1.load$pval < .05)
y7.x1.load <- subset(final_data, final_data$param == "L7_1")
mean(y7.x1.load$pval < .05)
y8.x1.load <- subset(final_data, final_data$param == "L8_1")
mean(y8.x1.load$pval < .05)
y9.x1.load <- subset(final_data, final_data$param == "L9_1")
mean(y9.x1.load$pval < .05)
y10.x1.load <- subset(final_data, final_data$param == "L10_1")
mean(y10.x1.load$pval < .05)
head(y10.x1.load)
y1.x1.load <- subset(final_data, final_data$param == "L1_1")
mean(y1.x1.load$est)
y2.x1.load <- subset(final_data, final_data$param == "L2_1")
mean(y2.x1.load$est)
y3.x1.load <- subset(final_data, final_data$param == "L3_1")
mean(y3.x1.load$est)
y4.x1.load <- subset(final_data, final_data$param == "L4_1")
mean(y4.x1.load$est)
y5.x1.load <- subset(final_data, final_data$param == "L5_1")
mean(y5.x1.load$est)
y6.x1.load <- subset(final_data, final_data$param == "L6_1")
mean(y6.x1.load$est)
y7.x1.load <- subset(final_data, final_data$param == "L7_1")
mean(y7.x1.load$est)
y8.x1.load <- subset(final_data, final_data$param == "L8_1")
mean(y8.x1.load$est)
y9.x1.load <- subset(final_data, final_data$param == "L9_1")
mean(y9.x1.load$est)
y10.x1.load <- subset(final_data, final_data$param == "L10_1")
mean(y10.x1.load$est)
y1.x2.load <- subset(final_data, final_data$param == "L1_2")
y1.x2.load <- subset(final_data, final_data$param == "L1_2")
mean(y1.x2.load$est)
y2.x2.load <- subset(final_data, final_data$param == "L2_2")
mean(y2.x2.load$est)
y3.x2.load <- subset(final_data, final_data$param == "L3_2")
mean(y3.x2.load$est)
y4.x2.load <- subset(final_data, final_data$param == "L4_2")
mean(y4.x2.load$est)
y5.x2.load <- subset(final_data, final_data$param == "L5_2")
mean(y5.x2.load$est)
y6.x2.load <- subset(final_data, final_data$param == "L6_2")
mean(y6.x2.load$est)
y7.x2.load <- subset(final_data, final_data$param == "L7_2")
mean(y7.x2.load$est)
y8.x2.load <- subset(final_data, final_data$param == "L8_2")
mean(y8.x2.load$est)
y9.x2.load <- subset(final_data, final_data$param == "L9_2")
mean(y9.x2.load$est)
y10.x2.load <- subset(final_data, final_data$param == "L10_2")
mean(y10.x2.load$est)
